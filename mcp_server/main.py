# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:05:41+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query
from starlette.requests import Request

from models import (
    ApiCoreDtoAccountingDomainWhitelistEntry,
    ApiCoreDtoAccountingGuest,
    ApiCoreDtoAccountingIpBlacklistEntry,
    ApiCoreDtoAccountingPlan,
    ApiCoreDtoAccountingUser,
    ApiCoreDtoAggregatedAggregatedResult,
    ApiCoreDtoAggregatedAggregatedSummaryResult,
    ApiCoreDtoClickStreamHitListPage,
    ApiCoreDtoConversionsConversion,
    ApiCoreDtoDatapointsDatapoint,
    ApiCoreDtoDomainsDomain,
    ApiCoreDtoGroupsGroup,
    ApiCoreDtoRetargetingRetargetingScript,
    ApiCoreDtoTagsTag,
    ApiCoreRequestsConversionPatchBody,
    ApiCoreRequestsDatapointsBatch,
    ApiCoreRequestsDeleteBatch,
    ApiCoreRequestsGenericTextPatch,
    ApiCoreRequestsPatchBody,
    ApiCoreRequestsPatchBodyBatch,
    ApiCoreRequestsPermissionPatchRequest,
    ApiCoreResponsesCountResponce,
    ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingDomainWhitelistEntry,
    ApiCoreResponsesEntitiesResponseApiCoreDtoAccountingIpBlacklistEntry,
    ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult,
    ApiCoreResponsesEntitiesResponseApiCoreDtoClickStreamHit,
    ApiCoreResponsesEntitiesResponseApiCoreDtoGrantsGrant,
    ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64,
    ApiCoreResponsesEntityUriSystemInt64,
    ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64,
    EntityType,
    Filter,
    Filter2,
    GroupBy,
    GroupBy10,
    GroupBy12,
    SortDirection,
    Status2,
    Status4,
    Status6,
    Status14,
    Status24,
    Status32,
    Status44,
    SystemObject,
    TimeFrame,
    Timeframe,
    Type2,
    Type6,
    Type8,
    Type20,
    Type24,
    Type30,
    Type34,
)

app = MCPProxy(
    contact={
        'email': 'api@clickmeter.com',
        'name': 'Api Support',
        'url': 'http://www.clickmeter.com/api',
    },
    description='Api dashboard for ClickMeter API',
    title='ClickMeter API',
    version='v2',
    servers=[
        {'url': 'http://apiv2.clickmeter.com:80'},
        {'url': 'https://apiv2.clickmeter.com:80'},
    ],
)


@app.get(
    '/account',
    tags=['account_info_retrieval', 'event_data_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get():
    """
    Retrieve current account data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__post(body: ApiCoreDtoAccountingUser):
    """
    Update current account data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/domainwhitelist',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_domain_whitelist(
    offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Retrieve list of a domains allowed to redirect in DDU mode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/domainwhitelist',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__put_domain_whitelist(body: ApiCoreDtoAccountingDomainWhitelistEntry):
    """
    Create an domain entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/domainwhitelist/{whitelistId}',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__delete_domain_whitelist(
    whitelist_id: str = Path(..., alias='whitelistId')
):
    """
    Delete an domain entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/guests',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_guests(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    text_search: Optional[str] = Query(None, alias='textSearch'),
):
    """
    Retrieve list of a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/guests',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__put_guest(body: ApiCoreDtoAccountingGuest):
    """
    Create a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/guests/count',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_guests_count(
    text_search: Optional[str] = Query(None, alias='textSearch')
):
    """
    Retrieve count of guests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/guests/{guestId}',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__delete_guest(guest_id: int = Path(..., alias='guestId')):
    """
    Delete a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/guests/{guestId}',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_guest(guest_id: int = Path(..., alias='guestId')):
    """
    Retrieve a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/guests/{guestId}',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__post_guest(
    guest_id: int = Path(..., alias='guestId'), body: ApiCoreDtoAccountingGuest = ...
):
    """
    Update a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/guests/{guestId}/permissions',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_permissions(
    guest_id: int = Path(..., alias='guestId'),
    entity_type: Optional[EntityType] = Query(None, alias='entityType'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    type: Optional[Type2] = None,
    entity_id: Optional[int] = Query(None, alias='entityId'),
):
    """
    Retrieve permissions for a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/guests/{guestId}/permissions/count',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_permissions_count(
    guest_id: int = Path(..., alias='guestId'),
    entity_type: Optional[EntityType] = Query(None, alias='entityType'),
    type: Optional[Type2] = None,
    entity_id: Optional[int] = Query(None, alias='entityId'),
):
    """
    Retrieve count of the permissions for a guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/guests/{guestId}/{type}/permissions/patch',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def post_account_guests__guest_id__type_permissions_patch(
    guest_id: int = Path(..., alias='guestId'),
    type: Type6 = ...,
    body: ApiCoreRequestsPermissionPatchRequest = ...,
):
    """
    Change the permission on a shared object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/guests/{guestId}/{type}/permissions/patch',
    tags=['guest_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__patch_permissions(
    guest_id: int = Path(..., alias='guestId'),
    type: Type6 = ...,
    body: ApiCoreRequestsPermissionPatchRequest = ...,
):
    """
    Change the permission on a shared object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/ipblacklist',
    tags=['ip_blacklist_operations', 'event_logging'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_ip_blacklist(
    offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Retrieve list of a ip to exclude from event tracking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/ipblacklist',
    tags=['ip_blacklist_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__put_ip_blacklist(body: ApiCoreDtoAccountingIpBlacklistEntry):
    """
    Create an ip blacklist entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/ipblacklist/{blacklistId}',
    tags=['ip_blacklist_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__delete_ip_blacklist(blacklist_id: str = Path(..., alias='blacklistId')):
    """
    Delete an ip blacklist entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/plan',
    tags=['account_info_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def account__get_plan():
    """
    Retrieve current account plan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aggregated',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def aggregated__get_statistics_single(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    hourly: Optional[bool] = None,
    only_favorites: Optional[str] = Query(None, alias='onlyFavorites'),
):
    """
    Retrieve statistics about this customer for a timeframe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aggregated/list',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def aggregated__get_statistics_list(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    group_by: Optional[GroupBy] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aggregated/summary/conversions',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def aggregated__get_conversions_summary(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status2] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
):
    """
    Retrieve statistics about a subset of conversions for a timeframe with conversions data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aggregated/summary/datapoints',
    tags=['statistics_retrieval', 'data_point_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def aggregated__get_datapoints_summary(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    type: Type8 = ...,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status4] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    group_id: Optional[int] = Query(None, alias='groupId'),
    text_search: Optional[str] = Query(None, alias='textSearch'),
):
    """
    Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aggregated/summary/groups',
    tags=['statistics_retrieval', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def aggregated__get_groups_summary(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status6] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
):
    """
    Retrieve statistics about a subset of groups for a timeframe with groups data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/clickstream',
    tags=['event_data_retrieval', 'event_logging'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def click_stream__get(
    group: Optional[int] = None,
    datapoint: Optional[int] = None,
    conversion: Optional[int] = None,
    page_size: Optional[int] = Query(50, alias='pageSize'),
    filter: Optional[Filter] = None,
):
    """
    Retrieve the latest list of events of this account. Limited to last 100.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions',
    tags=['conversion_statistics_handling', 'statistics_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    status: Optional[Status6] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Retrieve a list of conversions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversions',
    tags=['conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__put(body: ApiCoreDtoConversionsConversion):
    """
    Create a conversion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/aggregated/list',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_statistics_all_list(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status6] = None,
    group_by: Optional[GroupBy] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/count',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__count(
    status: Optional[Status6] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Retrieve a count of conversions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/conversions/{conversionId}',
    tags=['conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__delete(conversion_id: int = Path(..., alias='conversionId')):
    """
    Delete conversion specified by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}',
    tags=['conversion_statistics_handling', 'statistics_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_conversions__conversion_id(
    conversion_id: int = Path(..., alias='conversionId')
):
    """
    Retrieve conversion specified by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/conversions/{conversionId}',
    tags=['conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__post(
    conversion_id: int = Path(..., alias='conversionId'),
    body: ApiCoreDtoConversionsConversion = ...,
):
    """
    Update conversion specified by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}/aggregated',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_statistics_single(
    conversion_id: int = Path(..., alias='conversionId'),
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    hourly: Optional[bool] = None,
):
    """
    Retrieve statistics about this conversion for a timeframe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}/aggregated/list',
    tags=['statistics_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_statistics_list(
    conversion_id: int = Path(..., alias='conversionId'),
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    group_by: Optional[GroupBy] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}/datapoints',
    tags=[
        'conversion_statistics_handling',
        'data_point_operations',
        'event_data_retrieval',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_datapoints(
    conversion_id: int = Path(..., alias='conversionId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    type: Optional[Type8] = None,
    status: Optional[Status14] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Retrieve a list of datapoints connected to this conversion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversions/{conversionId}/datapoints/batch/patch',
    tags=[
        'conversion_statistics_handling',
        'data_point_operations',
        'bulk_data_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def put_conversions__conversion_id_datapoints_batch_patch(
    conversion_id: int = Path(..., alias='conversionId'),
    body: ApiCoreRequestsPatchBodyBatch = ...,
):
    """
    Modify the association between a conversion and multiple datapoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}/datapoints/count',
    tags=['conversion_statistics_handling', 'data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_datapoints_count(
    conversion_id: int = Path(..., alias='conversionId'),
    type: Optional[str] = None,
    status: Optional[str] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Retrieve a count of datapoints connected to this conversion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversions/{conversionId}/datapoints/patch',
    tags=['conversion_statistics_handling', 'data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__patch(
    conversion_id: int = Path(..., alias='conversionId'),
    body: ApiCoreRequestsConversionPatchBody = ...,
):
    """
    Modify the association between a conversion and a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/conversions/{conversionId}/hits',
    tags=['event_data_retrieval', 'conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__get_hits(
    conversion_id: int = Path(..., alias='conversionId'),
    timeframe: Timeframe = ...,
    limit: Optional[int] = None,
    offset: Optional[str] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    filter: Optional[Filter2] = None,
):
    """
    Retrieve the list of events related to this conversion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/conversions/{conversionId}/notes',
    tags=['conversion_statistics_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def conversions__patch_notes(
    conversion_id: int = Path(..., alias='conversionId'),
    body: ApiCoreRequestsGenericTextPatch = ...,
):
    """
    Fast patch the "notes" field of a conversion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints',
    tags=['data_point_operations', 'event_logging'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get(
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    type: Optional[Type8] = None,
    status: Optional[Status14] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    List of all the datapoints associated to the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datapoints',
    tags=['data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__put(body: ApiCoreDtoDatapointsDatapoint):
    """
    Create a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/aggregated',
    tags=['statistics_retrieval', 'data_point_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get_statistics_aggregated_single(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    type: Optional[Type8] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    hourly: Optional[bool] = None,
    status: Optional[Status14] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
):
    """
    Retrieve statistics about this customer for a timeframe by groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/aggregated/list',
    tags=['statistics_retrieval', 'data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get_statistics_all_list(
    type: Type8,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status14] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    group_by: Optional[GroupBy] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/datapoints/batch',
    tags=['data_point_operations', 'bulk_data_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__batch_delete(body: ApiCoreRequestsDeleteBatch):
    """
    Delete multiple datapoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datapoints/batch',
    tags=['data_point_operations', 'bulk_data_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__batch_post(body: ApiCoreRequestsDatapointsBatch):
    """
    Update multiple datapoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/datapoints/batch',
    tags=['data_point_operations', 'bulk_data_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__batch_put(body: ApiCoreRequestsDatapointsBatch):
    """
    Create multiple datapoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/count',
    tags=['data_point_operations', 'statistics_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__count(
    type: Optional[Type8] = None,
    status: Optional[Status14] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Count the datapoints associated to the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/datapoints/{id}',
    tags=['data_point_operations', 'bulk_data_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__delete(id: int):
    """
    Delete a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/{id}',
    tags=['data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_datapoints__id(id: int):
    """
    Get a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/datapoints/{id}',
    tags=['data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__post(id: int, body: ApiCoreDtoDatapointsDatapoint = ...):
    """
    Update a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/{id}/aggregated',
    tags=['statistics_retrieval', 'data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get_statistics_single(
    id: int,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    hourly: Optional[bool] = None,
):
    """
    Retrieve statistics about this datapoint for a timeframe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/{id}/aggregated/list',
    tags=['statistics_retrieval', 'data_point_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get_statistics_list(
    id: int,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    group_by: Optional[GroupBy] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/datapoints/{id}/favourite',
    tags=['data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__patch_favourite(id: int):
    """
    Fast switch the "favourite" field of a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datapoints/{id}/hits',
    tags=['event_data_retrieval', 'data_point_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__get_hits(
    id: int,
    timeframe: Timeframe = ...,
    limit: Optional[int] = None,
    offset: Optional[str] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    filter: Optional[Filter2] = None,
):
    """
    Retrieve the list of events related to this datapoint.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/datapoints/{id}/notes',
    tags=['data_point_operations', 'datapoint_tag_association_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def data_points__patch_notes(id: int, body: ApiCoreRequestsGenericTextPatch = ...):
    """
    Fast patch the "notes" field of a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def domains__get(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    type: Optional[Type20] = 'system',
    name: Optional[str] = None,
):
    """
    Retrieve a list of domains
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domains',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def domains__put(body: ApiCoreDtoDomainsDomain):
    """
    Create a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/count',
    tags=['domain_details_management', 'statistics_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def domains__count(type: Optional[Type20] = 'system', name: Optional[str] = None):
    """
    Retrieve count of domains
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/domains/{id}',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def domains__delete(id: int):
    """
    Delete a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/{id}',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_domains__id(id: int):
    """
    Get a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domains/{id}',
    tags=['domain_details_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def domains__update(id: int, body: ApiCoreDtoDomainsDomain = ...):
    """
    Update a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups',
    tags=[
        'account_info_retrieval',
        'group_operations',
        'event_data_retrieval',
        'tag_operations',
        'group_tag_association_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get(
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    status: Optional[Status24] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
    write: Optional[bool] = None,
):
    """
    List of all the groups associated to the user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups',
    tags=['group_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__put(body: ApiCoreDtoGroupsGroup):
    """
    Create a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/aggregated',
    tags=[
        'statistics_retrieval',
        'conversion_statistics_handling',
        'group_data_statistics',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_statistics_aggregated_single(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    hourly: Optional[bool] = None,
    status: Optional[Status24] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
):
    """
    Retrieve statistics about this customer for a timeframe by groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/aggregated/list',
    tags=['statistics_retrieval', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_statistics_all_list(
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[str] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    group_by: Optional[GroupBy10] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/count',
    tags=[
        'group_operations',
        'group_data_statistics',
        'group_datapoint_handling',
        'group_tag_association_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__count(
    status: Optional[Status24] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
    write: Optional[bool] = None,
):
    """
    Count the groups associated to the user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/groups/{id}',
    tags=['group_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__delete(id: int):
    """
    Delete group specified by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}',
    tags=['group_operations', 'event_data_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_groups__id(id: int):
    """
    Get a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups/{id}',
    tags=['group_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__post(id: int, body: ApiCoreDtoGroupsGroup = ...):
    """
    Update a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/aggregated',
    tags=['statistics_retrieval', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_statistics_single(
    id: int,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    hourly: Optional[bool] = None,
):
    """
    Retrieve statistics about this group for a timeframe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/aggregated/list',
    tags=['statistics_retrieval', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_statistics_list(
    id: int,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    group_by: Optional[GroupBy12] = Query(None, alias='groupBy'),
):
    """
    Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/aggregated/summary',
    tags=['statistics_retrieval', 'data_point_operations', 'bulk_data_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_datapoints_summary(
    id: int,
    time_frame: TimeFrame = Query(..., alias='timeFrame'),
    type: Optional[Type24] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    status: Optional[Status24] = None,
    tag: Optional[str] = None,
    favourite: Optional[bool] = None,
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    text_search: Optional[str] = Query(None, alias='textSearch'),
):
    """
    Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/datapoints',
    tags=['data_point_operations', 'group_datapoint_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_datapoints(
    id: int,
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    type: Optional[Type24] = None,
    status: Optional[Status32] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    List of all the datapoints associated to the user in this group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups/{id}/datapoints',
    tags=['data_point_operations', 'group_datapoint_handling'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__put_datapoint(id: int, body: ApiCoreDtoDatapointsDatapoint = ...):
    """
    Create a datapoint in this group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/datapoints/count',
    tags=['data_point_operations', 'group_datapoint_handling', 'statistics_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_datapoints_count(
    id: int,
    type: Optional[Type24] = None,
    status: Optional[Status32] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Count the datapoints associated to the user in this group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/groups/{id}/favourite',
    tags=['group_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__patch_favourite(id: int):
    """
    Fast switch the "favourite" field of a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups/{id}/hits',
    tags=['event_data_retrieval', 'group_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__get_hits(
    id: int,
    timeframe: Timeframe = ...,
    limit: Optional[int] = None,
    offset: Optional[str] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    filter: Optional[Filter2] = None,
):
    """
    Retrieve the list of events related to this group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/groups/{id}/notes',
    tags=['group_operations', 'group_data_statistics'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def groups__patch_notes(id: int, body: ApiCoreRequestsGenericTextPatch = ...):
    """
    Fast patch the "notes" field of a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/hits',
    tags=['event_logging', 'event_data_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def hits__get_hits(
    timeframe: Timeframe,
    limit: Optional[int] = None,
    offset: Optional[str] = None,
    from_day: Optional[str] = Query(None, alias='fromDay'),
    to_day: Optional[str] = Query(None, alias='toDay'),
    filter: Optional[Filter2] = None,
):
    """
    Retrieve the list of events related to this account.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/me',
    tags=['account_info_retrieval', 'event_logging'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def me__get_me():
    """
    Retrieve current account data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/me/plan',
    tags=['account_info_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def me__get_me_plan():
    """
    Retrieve current account plan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retargeting',
    tags=['retargeting_script_management', 'account_info_retrieval'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__get(offset: Optional[int] = 0, limit: Optional[int] = 20):
    """
    List of all the retargeting scripts associated to the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/retargeting',
    tags=['retargeting_script_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__put(body: ApiCoreDtoRetargetingRetargetingScript):
    """
    Creates a retargeting script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retargeting/count',
    tags=['retargeting_script_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__count():
    """
    Retrieve count of retargeting scripts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/retargeting/{id}',
    tags=['retargeting_script_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__delete(id: int):
    """
    Deletes a retargeting script (and remove associations)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retargeting/{id}',
    tags=['retargeting_script_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_retargeting__id(id: int):
    """
    Get a retargeting script object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/retargeting/{id}',
    tags=['retargeting_script_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__post(id: int, body: ApiCoreDtoRetargetingRetargetingScript = ...):
    """
    Updates a retargeting script
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retargeting/{id}/datapoints',
    tags=[
        'data_point_operations',
        'retargeting_script_management',
        'datapoint_tag_association_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__get_datapoints(
    id: int,
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    status: Optional[Status32] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    sort_by: Optional[str] = Query(None, alias='sortBy'),
    sort_direction: Optional[SortDirection] = Query(None, alias='sortDirection'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    List of all the datapoints associated to the retargeting script.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/retargeting/{id}/datapoints/count',
    tags=[
        'statistics_retrieval',
        'data_point_operations',
        'conversion_statistics_handling',
        'retargeting_script_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def retargeting__get_datapoints_count(
    id: int,
    status: Optional[Status32] = None,
    tags: Optional[str] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    only_favorites: Optional[bool] = Query(None, alias='onlyFavorites'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Count the datapoints associated to the retargeting script.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags',
    tags=['group_operations', 'tag_operations', 'group_tag_association_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__get(
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    name: Optional[str] = None,
    datapoints: Optional[str] = None,
    groups: Optional[str] = None,
    type: Optional[Type30] = None,
):
    """
    List of all the groups associated to the user filtered by this tag.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags',
    tags=['tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__put(body: ApiCoreDtoTagsTag):
    """
    Create a tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/count',
    tags=['group_operations', 'group_tag_association_management', 'tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__count(
    name: Optional[str] = None,
    datapoints: Optional[str] = None,
    groups: Optional[str] = None,
    type: Optional[Type30] = None,
):
    """
    List of all the groups associated to the user filtered by this tag.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{tagId}',
    tags=[
        'tag_operations',
        'group_tag_association_management',
        'datapoint_tag_association_management',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__delete(tag_id: int = Path(..., alias='tagId')):
    """
    Delete a tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{tagId}',
    tags=['tag_operations', 'datapoint_tag_association_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def get_tags__tag_id(tag_id: int = Path(..., alias='tagId')):
    """
    Retrieve a tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{tagId}/datapoints',
    tags=['datapoint_tag_association_management', 'tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__delete_related_datapoints(tag_id: int = Path(..., alias='tagId')):
    """
    Delete the association of this tag with all datapoints
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{tagId}/datapoints',
    tags=[
        'data_point_operations',
        'datapoint_tag_association_management',
        'tag_operations',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__get_datapoints(
    tag_id: int = Path(..., alias='tagId'),
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    type: Optional[Type34] = None,
    status: Optional[Status32] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    List of all the datapoints associated to the user filtered by this tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{tagId}/datapoints/count',
    tags=[
        'data_point_operations',
        'datapoint_tag_association_management',
        'tag_operations',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__get_datapoints_count(
    tag_id: int = Path(..., alias='tagId'),
    type: Optional[Type34] = None,
    status: Optional[Status32] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Count the datapoints associated to the user filtered by this tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tags/{tagId}/datapoints/patch',
    tags=['datapoint_tag_association_management', 'tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__patch_data_point(
    tag_id: int = Path(..., alias='tagId'), body: ApiCoreRequestsPatchBody = ...
):
    """
    Associate/Deassociate a tag with a datapoint
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{tagId}/groups',
    tags=['group_tag_association_management', 'tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__delete_related_groups(tag_id: int = Path(..., alias='tagId')):
    """
    Delete the association of this tag with all groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{tagId}/groups',
    tags=['tag_operations', 'group_tag_association_management'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__get_groups(
    tag_id: int = Path(..., alias='tagId'),
    offset: Optional[int] = 0,
    limit: Optional[int] = 20,
    status: Optional[Status44] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    List of all the groups associated to the user filtered by this tag.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{tagId}/groups/count',
    tags=[
        'group_tag_association_management',
        'group_data_statistics',
        'group_operations',
    ],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__get_groups_count(
    tag_id: int = Path(..., alias='tagId'),
    status: Optional[Status44] = None,
    text_search: Optional[str] = Query(None, alias='textSearch'),
    created_after: Optional[str] = Query(None, alias='createdAfter'),
    created_before: Optional[str] = Query(None, alias='createdBefore'),
):
    """
    Count the groups associated to the user filtered by this tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tags/{tagId}/groups/patch',
    tags=['group_tag_association_management', 'tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__patch_group(
    tag_id: int = Path(..., alias='tagId'), body: ApiCoreRequestsPatchBody = ...
):
    """
    Associate/Deassociate a tag with a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/tags/{tagId}/name',
    tags=['tag_operations'],
    security=[
        APIKeyHeader(name="X-Clickmeter-AuthKey"),
    ],
)
def tags__patch_tag_name(
    tag_id: int = Path(..., alias='tagId'), body: ApiCoreRequestsGenericTextPatch = ...
):
    """
    Fast patch a tag name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
